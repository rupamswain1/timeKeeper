{"ast":null,"code":"import TotalTimeType from './TotalTime.type';\nimport { takeEvery, put, select } from 'redux-saga/effects';\nimport { startTask } from '../task/Task.action';\nimport { startCountDown } from '../totalTime/TotalTime.action';\n\nfunction* updateCountDown() {\n  const {\n    countDownProgress\n  } = yield select(state => state.TotalTimeReducer);\n  const taskReducer = yield select(state => state.TaskReducer); //check for count down is in progress or not,\n  //check task paused status\n\n  console.log('saaaaaaaaa');\n\n  if (countDownProgress) {\n    yield put(startCountDown(1));\n    yield put(startTask(taskReducer.activeTask, 1));\n  }\n}\n\nexport function* startTaskTime() {\n  yield takeEvery(TotalTimeType.UPDATE_COUNTDOWN, updateCountDown);\n}","map":{"version":3,"sources":["/home/rupam/Documents/Development/Timekeeper/timekeeper-frontend/src/redux/totalTime/TotalTime.sagas.js"],"names":["TotalTimeType","takeEvery","put","select","startTask","startCountDown","updateCountDown","countDownProgress","state","TotalTimeReducer","taskReducer","TaskReducer","console","log","activeTask","startTaskTime","UPDATE_COUNTDOWN"],"mappings":"AAAA,OAAOA,aAAP,MAA0B,kBAA1B;AACA,SAAQC,SAAR,EAAkBC,GAAlB,EAAsBC,MAAtB,QAAmC,oBAAnC;AACA,SAAQC,SAAR,QAAwB,qBAAxB;AACA,SAAQC,cAAR,QAA6B,+BAA7B;;AACA,UAAUC,eAAV,GAA2B;AACvB,QAAM;AAACC,IAAAA;AAAD,MAAoB,MAAMJ,MAAM,CAACK,KAAK,IAAEA,KAAK,CAACC,gBAAd,CAAtC;AACA,QAAMC,WAAW,GAAC,MAAMP,MAAM,CAACK,KAAK,IAAEA,KAAK,CAACG,WAAd,CAA9B,CAFuB,CAGvB;AACA;;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;;AACA,MAAGN,iBAAH,EAAqB;AACjB,UAAML,GAAG,CAACG,cAAc,CAAC,CAAD,CAAf,CAAT;AACA,UAAMH,GAAG,CAACE,SAAS,CAACM,WAAW,CAACI,UAAb,EAAwB,CAAxB,CAAV,CAAT;AACH;AAEJ;;AAED,OAAO,UAAUC,aAAV,GAAyB;AAC5B,QAAMd,SAAS,CAACD,aAAa,CAACgB,gBAAf,EAAiCV,eAAjC,CAAf;AACH","sourcesContent":["import TotalTimeType from './TotalTime.type';\nimport {takeEvery,put,select} from 'redux-saga/effects';\nimport {startTask} from '../task/Task.action';\nimport {startCountDown} from '../totalTime/TotalTime.action';\nfunction* updateCountDown(){\n    const {countDownProgress}=yield select(state=>state.TotalTimeReducer)\n    const taskReducer=yield select(state=>state.TaskReducer)\n    //check for count down is in progress or not,\n    //check task paused status\n    console.log('saaaaaaaaa')\n    if(countDownProgress){\n        yield put(startCountDown(1))\n        yield put(startTask(taskReducer.activeTask,1))\n    }\n   \n}\n\nexport function* startTaskTime(){\n    yield takeEvery(TotalTimeType.UPDATE_COUNTDOWN, updateCountDown)\n}"]},"metadata":{},"sourceType":"module"}