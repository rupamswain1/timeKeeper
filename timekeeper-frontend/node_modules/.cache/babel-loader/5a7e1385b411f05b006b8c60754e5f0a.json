{"ast":null,"code":"var _jsxFileName = \"/home/rupam/Documents/Development/Timekeeper/timekeeper-frontend/src/components/toDoTaskContainer/ToDoTaskContainer.component.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport './ToDoTaskContainer.style.scss';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport CheckIcon from '@material-ui/icons/Check';\nimport Fab from '@material-ui/core/Fab';\nimport AddIcon from '@material-ui/icons/Add';\nimport AddedTask from '../addedTask/AddedTask.component';\nimport { addTask } from '../../redux/task/Task.action';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst ToDoTaskContainer = () => {\n  _s();\n\n  const {\n    taskList\n  } = useSelector(state => state.TaskReducer);\n  const {\n    key,\n    originalTime,\n    totalTime\n  } = useSelector(state => state.TaskReducer);\n  const dispatch = useDispatch();\n  const [taskName, setTaskName] = useState();\n  console.log(taskList);\n\n  const setTask = event => {\n    setTaskName(event.target.value);\n  };\n\n  const dispatchAddTask = () => {\n    dispatch(addTask(taskName));\n    setTaskName('');\n    document.getElementById('outlined-basic').blur();\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: totalTime[key] ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"toDoMainContainer\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"headingToDo\",\n        children: \"Task List\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"addTaskinpputContainer\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"addTaskContainer\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            value: taskName,\n            onChange: setTask,\n            className: \"addTaskText\",\n            id: \"outlined-basic\",\n            placeholder: \"Add Task\",\n            variant: \"outlined\",\n            color: \"primary\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 36,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"contained\",\n            color: \"primary\",\n            className: \"saveTaskBtn\",\n            startIcon: /*#__PURE__*/_jsxDEV(CheckIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 42,\n              columnNumber: 32\n            }, this),\n            onClick: dispatchAddTask\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 38,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"addedTaskListContainer\",\n        children: Object.keys(taskList).map(key => {\n          return taskList[key].isCompleted ? '' : /*#__PURE__*/_jsxDEV(AddedTask, {\n            type: taskList[key].type,\n            completed: taskList[key].isCompleted,\n            bgColor: taskList[key].color,\n            taskName: key,\n            paused: taskList[key].paused,\n            percentage: taskList[key].percentage\n          }, key, false, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 26\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 9\n    }, this) : ''\n  }, void 0, false);\n};\n\n_s(ToDoTaskContainer, \"ZzbR8s6i5Qxf6P/4fE36wrT1lEo=\", false, function () {\n  return [useSelector, useSelector, useDispatch];\n});\n\n_c = ToDoTaskContainer;\nexport default ToDoTaskContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"ToDoTaskContainer\");","map":{"version":3,"sources":["/home/rupam/Documents/Development/Timekeeper/timekeeper-frontend/src/components/toDoTaskContainer/ToDoTaskContainer.component.jsx"],"names":["React","useState","useSelector","useDispatch","Tooltip","TextField","Button","CheckIcon","Fab","AddIcon","AddedTask","addTask","ToDoTaskContainer","taskList","state","TaskReducer","key","originalTime","totalTime","dispatch","taskName","setTaskName","console","log","setTask","event","target","value","dispatchAddTask","document","getElementById","blur","Object","keys","map","isCompleted","type","color","paused","percentage"],"mappings":"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","sourcesContent":["import React,{useState} from 'react';\nimport {useSelector, useDispatch} from 'react-redux';\nimport './ToDoTaskContainer.style.scss'\nimport Tooltip from '@material-ui/core/Tooltip';\nimport TextField from '@material-ui/core/TextField'\nimport Button from '@material-ui/core/Button';\nimport CheckIcon from '@material-ui/icons/Check';\nimport Fab from '@material-ui/core/Fab';\nimport AddIcon from '@material-ui/icons/Add';\nimport AddedTask from '../addedTask/AddedTask.component';\nimport {addTask} from '../../redux/task/Task.action';\n\nconst ToDoTaskContainer=()=>{\n\n    const {taskList}=useSelector(state=>state.TaskReducer);\n    const {key,originalTime,totalTime}=useSelector(state=>state.TaskReducer);\n    const dispatch=useDispatch();\n    const[taskName,setTaskName]=useState();\n    console.log(taskList)\n    const setTask=(event)=>{\n        setTaskName(event.target.value);\n    }\n    const dispatchAddTask=()=>{\n        dispatch(addTask(taskName));\n        setTaskName('');\n        document.getElementById('outlined-basic').blur();\n    }\n   \n    return(\n        <>\n        {totalTime[key]?\n        <div className='toDoMainContainer'>\n            <span className='headingToDo'>Task List</span>\n            <div className='addTaskinpputContainer'>\n                <div className='addTaskContainer'>\n                    <input value={taskName} onChange={setTask} className='addTaskText' id=\"outlined-basic\" placeholder=\"Add Task\" variant=\"outlined\" color='primary'></input>\n                   \n                    <Button\n                    variant=\"contained\"\n                    color=\"primary\"\n                    className='saveTaskBtn'\n                    startIcon={<CheckIcon />}\n                    onClick={dispatchAddTask}\n                    ></Button>\n                    <hr></hr>\n                </div>\n            </div>\n            <div className='addedTaskListContainer'>\n\n                {Object.keys(taskList).map((key)=>\n                    {   return(\n                        taskList[key].isCompleted?'':\n                        (<AddedTask key={key} type={taskList[key].type} completed={taskList[key].isCompleted} bgColor={taskList[key].color} taskName={key} paused={taskList[key].paused} percentage={taskList[key].percentage}/>)\n                        )\n                    }    \n                    )\n                }          \n            </div>\n\n        </div>\n        :''}\n        </>\n    )\n}\nexport default ToDoTaskContainer;"]},"metadata":{},"sourceType":"module"}