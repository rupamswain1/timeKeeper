{"ast":null,"code":"import TotalTimeType from './TotalTime.type';\nimport { takeEvery, put, select } from 'redux-saga/effects';\nimport { startTask } from '../task/Task.action';\nimport { startCountDown } from '../totalTime/TotalTime.action';\nimport { GetDate } from '../../logic/getDate';\nimport { submitDataStart } from '../submitData/SubmitData.action';\n\nfunction* updateCountDown() {\n  var d = new Date(); // for now\n\n  var hr = d.getHours(); // => 9\n\n  var min = d.getMinutes(); // =>  30\n\n  var sec = d.getSeconds();\n  const {\n    key,\n    countDownProgress,\n    totalTime,\n    originalTime\n  } = yield select(state => state.TotalTimeReducer);\n  const taskReducer = yield select(state => state.TaskReducer);\n\n  if (parseInt(hr) === 23 && parseInt(min) === 58) {\n    window.alert('The day is about to end, and a new day will begin, please add new target time, your old progress is saved');\n    yield put(submitDataStart);\n  } else {\n    let originalTimeLocal = originalTime[key][GetDate()]; //check for count down is in progress or not,\n    //check task paused status\n    //console.log('saaaaaaaaa')\n\n    if (countDownProgress) {\n      yield put(startCountDown(1));\n      yield put(startTask(taskReducer.activeTask, 1, originalTimeLocal));\n    }\n  }\n}\n\nexport function* startTaskTime() {\n  yield takeEvery(TotalTimeType.UPDATE_COUNTDOWN, updateCountDown);\n}","map":{"version":3,"sources":["/home/rupam/Documents/Development/Timekeeper/timekeeper-frontend/src/redux/totalTime/TotalTime.sagas.js"],"names":["TotalTimeType","takeEvery","put","select","startTask","startCountDown","GetDate","submitDataStart","updateCountDown","d","Date","hr","getHours","min","getMinutes","sec","getSeconds","key","countDownProgress","totalTime","originalTime","state","TotalTimeReducer","taskReducer","TaskReducer","parseInt","window","alert","originalTimeLocal","activeTask","startTaskTime","UPDATE_COUNTDOWN"],"mappings":"AAAA,OAAOA,aAAP,MAA0B,kBAA1B;AACA,SAAQC,SAAR,EAAkBC,GAAlB,EAAsBC,MAAtB,QAAmC,oBAAnC;AACA,SAAQC,SAAR,QAAwB,qBAAxB;AACA,SAAQC,cAAR,QAA6B,+BAA7B;AACA,SAAQC,OAAR,QAAsB,qBAAtB;AACA,SAAQC,eAAR,QAA8B,iCAA9B;;AACA,UAAUC,eAAV,GAA2B;AACvB,MAAIC,CAAC,GAAG,IAAIC,IAAJ,EAAR,CADuB,CACH;;AACpB,MAAIC,EAAE,GAACF,CAAC,CAACG,QAAF,EAAP,CAFuB,CAEF;;AACrB,MAAIC,GAAG,GAACJ,CAAC,CAACK,UAAF,EAAR,CAHuB,CAGC;;AACxB,MAAIC,GAAG,GAACN,CAAC,CAACO,UAAF,EAAR;AACA,QAAM;AAACC,IAAAA,GAAD;AAAKC,IAAAA,iBAAL;AAAuBC,IAAAA,SAAvB;AAAiCC,IAAAA;AAAjC,MAA+C,MAAMjB,MAAM,CAACkB,KAAK,IAAEA,KAAK,CAACC,gBAAd,CAAjE;AACA,QAAMC,WAAW,GAAC,MAAMpB,MAAM,CAACkB,KAAK,IAAEA,KAAK,CAACG,WAAd,CAA9B;;AACA,MAAGC,QAAQ,CAACd,EAAD,CAAR,KAAe,EAAf,IAAqBc,QAAQ,CAACZ,GAAD,CAAR,KAAgB,EAAxC,EAA2C;AACvCa,IAAAA,MAAM,CAACC,KAAP,CAAa,2GAAb;AACA,UAAMzB,GAAG,CAACK,eAAD,CAAT;AACH,GAHD,MAII;AACJ,QAAIqB,iBAAiB,GAACR,YAAY,CAACH,GAAD,CAAZ,CAAkBX,OAAO,EAAzB,CAAtB,CADI,CAGJ;AACA;AACA;;AACA,QAAGY,iBAAH,EAAqB;AACjB,YAAMhB,GAAG,CAACG,cAAc,CAAC,CAAD,CAAf,CAAT;AACA,YAAMH,GAAG,CAACE,SAAS,CAACmB,WAAW,CAACM,UAAb,EAAwB,CAAxB,EAA0BD,iBAA1B,CAAV,CAAT;AACH;AACA;AACJ;;AAED,OAAO,UAAUE,aAAV,GAAyB;AAC5B,QAAM7B,SAAS,CAACD,aAAa,CAAC+B,gBAAf,EAAiCvB,eAAjC,CAAf;AACH","sourcesContent":["import TotalTimeType from './TotalTime.type';\nimport {takeEvery,put,select} from 'redux-saga/effects';\nimport {startTask} from '../task/Task.action';\nimport {startCountDown} from '../totalTime/TotalTime.action';\nimport {GetDate} from '../../logic/getDate';\nimport {submitDataStart} from '../submitData/SubmitData.action'\nfunction* updateCountDown(){\n    var d = new Date(); // for now\n    var hr=d.getHours(); // => 9\n    var min=d.getMinutes(); // =>  30\n    var sec=d.getSeconds(); \n    const {key,countDownProgress,totalTime,originalTime}=yield select(state=>state.TotalTimeReducer)\n    const taskReducer=yield select(state=>state.TaskReducer)\n    if(parseInt(hr)===23 && parseInt(min)===58){\n        window.alert('The day is about to end, and a new day will begin, please add new target time, your old progress is saved');\n        yield put(submitDataStart)\n    }\n    else{\n    let originalTimeLocal=originalTime[key][GetDate()];\n    \n    //check for count down is in progress or not,\n    //check task paused status\n    //console.log('saaaaaaaaa')\n    if(countDownProgress){\n        yield put(startCountDown(1))\n        yield put(startTask(taskReducer.activeTask,1,originalTimeLocal))\n    }\n    }\n}\n\nexport function* startTaskTime(){\n    yield takeEvery(TotalTimeType.UPDATE_COUNTDOWN, updateCountDown)\n}"]},"metadata":{},"sourceType":"module"}