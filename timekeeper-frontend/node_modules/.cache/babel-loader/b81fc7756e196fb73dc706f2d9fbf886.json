{"ast":null,"code":"var _jsxFileName = \"/home/rupam/Documents/Development/Timekeeper/timekeeper-frontend/src/components/toDoTaskContainer/ToDoTaskContainer.component.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport './ToDoTaskContainer.style.scss';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport CheckIcon from '@material-ui/icons/Check';\nimport Fab from '@material-ui/core/Fab';\nimport AddIcon from '@material-ui/icons/Add';\nimport AddedTask from '../addedTask/AddedTask.component';\nimport { addTask } from '../../redux/task/Task.action';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ToDoTaskContainer = () => {\n  _s();\n\n  const {\n    taskList\n  } = useSelector(state => state.TaskReducer);\n  const dispatch = useDispatch();\n  const [taskName, setTaskName] = useState();\n  console.log(taskList);\n\n  const setTask = event => {\n    setTaskName(event.target.value);\n  };\n\n  const dispatchAddTask = () => {\n    dispatch(addTask(taskName));\n    setTaskName('');\n    document.getElementById('outlined-basic').blur();\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"toDoMainContainer\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"addTaskinpputContainer\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"addTaskContainer\",\n        children: [/*#__PURE__*/_jsxDEV(TextField, {\n          value: taskName,\n          onChange: setTask,\n          className: \"addTaskText\",\n          id: \"outlined-basic\",\n          placeholder: \"Add Task\",\n          variant: \"outlined\",\n          color: \"primary\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          color: \"primary\",\n          className: \"saveTaskBtn\",\n          startIcon: /*#__PURE__*/_jsxDEV(CheckIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 36,\n            columnNumber: 32\n          }, this),\n          onClick: dispatchAddTask\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"addedTaskListContainer\",\n      children: Object.keys(taskList).map(key => {\n        return taskList[key].isCompleted ? '' : /*#__PURE__*/_jsxDEV(AddedTask, {\n          type: taskList[key],\n          completed: taskList[key].isCompleted,\n          bgColor: taskList[key].color,\n          taskName: key,\n          paused: taskList[key].paused,\n          percentage: taskList[key].percentage\n        }, key, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 26\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ToDoTaskContainer, \"GQh8QD8uBRj9NAwFiN61ADhEcOY=\", false, function () {\n  return [useSelector, useDispatch];\n});\n\n_c = ToDoTaskContainer;\nexport default ToDoTaskContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"ToDoTaskContainer\");","map":{"version":3,"sources":["/home/rupam/Documents/Development/Timekeeper/timekeeper-frontend/src/components/toDoTaskContainer/ToDoTaskContainer.component.jsx"],"names":["React","useState","useSelector","useDispatch","Tooltip","TextField","Button","CheckIcon","Fab","AddIcon","AddedTask","addTask","ToDoTaskContainer","taskList","state","TaskReducer","dispatch","taskName","setTaskName","console","log","setTask","event","target","value","dispatchAddTask","document","getElementById","blur","Object","keys","map","key","isCompleted","color","paused","percentage"],"mappings":"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","sourcesContent":["import React,{useState} from 'react';\nimport {useSelector, useDispatch} from 'react-redux';\nimport './ToDoTaskContainer.style.scss'\nimport Tooltip from '@material-ui/core/Tooltip';\nimport TextField from '@material-ui/core/TextField'\nimport Button from '@material-ui/core/Button';\nimport CheckIcon from '@material-ui/icons/Check';\nimport Fab from '@material-ui/core/Fab';\nimport AddIcon from '@material-ui/icons/Add';\nimport AddedTask from '../addedTask/AddedTask.component';\nimport {addTask} from '../../redux/task/Task.action';\nconst ToDoTaskContainer=()=>{\n\n    const {taskList}=useSelector(state=>state.TaskReducer);\n    const dispatch=useDispatch();\n    const[taskName,setTaskName]=useState();\n    console.log(taskList)\n    const setTask=(event)=>{\n        setTaskName(event.target.value);\n    }\n    const dispatchAddTask=()=>{\n        dispatch(addTask(taskName));\n        setTaskName('');\n        document.getElementById('outlined-basic').blur();\n    }\n\n    return(\n        <div className='toDoMainContainer'>\n            <div className='addTaskinpputContainer'>\n                <div className='addTaskContainer'>\n                    <TextField value={taskName} onChange={setTask} className='addTaskText' id=\"outlined-basic\" placeholder=\"Add Task\" variant=\"outlined\" color='primary'/>\n                    <Button\n                    variant=\"contained\"\n                    color=\"primary\"\n                    className='saveTaskBtn'\n                    startIcon={<CheckIcon />}\n                    onClick={dispatchAddTask}\n                    ></Button>\n                    <hr></hr>\n                </div>\n            </div>\n            <div className='addedTaskListContainer'>\n\n                {Object.keys(taskList).map((key)=>\n                    {   return(\n                        taskList[key].isCompleted?'':\n                        (<AddedTask key={key} type={taskList[key]} completed={taskList[key].isCompleted} bgColor={taskList[key].color} taskName={key} paused={taskList[key].paused} percentage={taskList[key].percentage}/>)\n                        )\n                    }    \n                    )\n                }          \n            </div>\n\n        </div>\n    )\n}\nexport default ToDoTaskContainer;"]},"metadata":{},"sourceType":"module"}