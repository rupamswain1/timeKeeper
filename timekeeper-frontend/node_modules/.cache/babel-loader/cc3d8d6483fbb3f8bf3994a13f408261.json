{"ast":null,"code":"const ArrayToSeconds = timeArr => {\n  const hh = parseInt(timeArr[0]) * 10 + parseInt(timeArr[1]);\n  const mm = parseInt(timeArr[2]) * 10 + parseInt(timeArr[3]);\n  const ss = parseInt(timeArr[4]) * 10 + parseInt(timeArr[5]);\n  let seconds = hh * 3600 + mm * 60 + ss; //console.log(seconds)\n\n  return seconds;\n};\n\n_c = ArrayToSeconds;\n\nconst SecondsToArray = timeInSec => {\n  let totalSeconds = parseInt(timeInSec);\n  console.log(totalSeconds);\n  let hour = Math.floor(totalSeconds / 3600);\n  let hourSec = hour * 3600;\n  let minutes = Math.floor((totalSeconds - hourSec) / 60);\n  let seconds = totalSeconds - hourSec - minutes * 60;\n  let timeArr = [0, 0, 0, 0, 0, 0];\n\n  if (hour < 10) {\n    timeArr[1] = hour;\n  } else {\n    let strhour = hour.toString();\n    timeArr[0] = strhour.substr(0, 1);\n    timeArr[1] = strhour.substr(1);\n  }\n\n  if (minutes < 10) {\n    timeArr[3] = minutes;\n  } else {\n    let strMinutes = minutes.toString();\n    timeArr[2] = strMinutes.substr(0, 1);\n    timeArr[3] = strMinutes.substr(1);\n  }\n\n  if (seconds < 10) {\n    timeArr[5] = seconds;\n  } else {\n    let strSeconds = seconds.toString();\n    timeArr[4] = strSeconds.substr(0, 1);\n    timeArr[5] = strSeconds.substr(1);\n  }\n\n  console.log(timeArr);\n  return timeArr;\n};\n\n_c2 = SecondsToArray;\nconsole.log(SecondsToArray(-2)); //console.log(SecondsToArray(ArrayToSeconds([1,1,5,8,0,3])))\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"ArrayToSeconds\");\n$RefreshReg$(_c2, \"SecondsToArray\");","map":{"version":3,"sources":["/home/rupam/Documents/Development/Timekeeper/timekeeper-frontend/src/logic/arrayToSeconds.js"],"names":["ArrayToSeconds","timeArr","hh","parseInt","mm","ss","seconds","SecondsToArray","timeInSec","totalSeconds","console","log","hour","Math","floor","hourSec","minutes","strhour","toString","substr","strMinutes","strSeconds"],"mappings":"AACA,MAAMA,cAAc,GAAEC,OAAD,IAAW;AAC5B,QAAMC,EAAE,GAAEC,QAAQ,CAACF,OAAO,CAAC,CAAD,CAAR,CAAR,GAAqB,EAAtB,GAA0BE,QAAQ,CAACF,OAAO,CAAC,CAAD,CAAR,CAA3C;AACA,QAAMG,EAAE,GAAED,QAAQ,CAACF,OAAO,CAAC,CAAD,CAAR,CAAR,GAAqB,EAAtB,GAA0BE,QAAQ,CAACF,OAAO,CAAC,CAAD,CAAR,CAA3C;AACA,QAAMI,EAAE,GAAEF,QAAQ,CAACF,OAAO,CAAC,CAAD,CAAR,CAAR,GAAqB,EAAtB,GAA0BE,QAAQ,CAACF,OAAO,CAAC,CAAD,CAAR,CAA3C;AACA,MAAIK,OAAO,GAAEJ,EAAE,GAAC,IAAJ,GAAWE,EAAE,GAAC,EAAd,GAAmBC,EAA/B,CAJ4B,CAK5B;;AACA,SAAOC,OAAP;AACH,CAPD;;KAAMN,c;;AASN,MAAMO,cAAc,GAAEC,SAAD,IAAa;AAC9B,MAAIC,YAAY,GAACN,QAAQ,CAACK,SAAD,CAAzB;AACAE,EAAAA,OAAO,CAACC,GAAR,CAAYF,YAAZ;AACA,MAAIG,IAAI,GAACC,IAAI,CAACC,KAAL,CAAWL,YAAY,GAAC,IAAxB,CAAT;AACA,MAAIM,OAAO,GAACH,IAAI,GAAC,IAAjB;AACA,MAAII,OAAO,GAACH,IAAI,CAACC,KAAL,CAAW,CAACL,YAAY,GAAEM,OAAf,IAAyB,EAApC,CAAZ;AACA,MAAIT,OAAO,GAACG,YAAY,GAAEM,OAAd,GAAwBC,OAAO,GAAC,EAA5C;AACA,MAAIf,OAAO,GAAC,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,EAAO,CAAP,EAAS,CAAT,EAAW,CAAX,CAAZ;;AAEA,MAAGW,IAAI,GAAC,EAAR,EAAW;AACPX,IAAAA,OAAO,CAAC,CAAD,CAAP,GAAWW,IAAX;AACH,GAFD,MAGI;AACA,QAAIK,OAAO,GAACL,IAAI,CAACM,QAAL,EAAZ;AACAjB,IAAAA,OAAO,CAAC,CAAD,CAAP,GAAWgB,OAAO,CAACE,MAAR,CAAe,CAAf,EAAiB,CAAjB,CAAX;AACAlB,IAAAA,OAAO,CAAC,CAAD,CAAP,GAAWgB,OAAO,CAACE,MAAR,CAAe,CAAf,CAAX;AACH;;AACD,MAAGH,OAAO,GAAC,EAAX,EAAc;AACVf,IAAAA,OAAO,CAAC,CAAD,CAAP,GAAWe,OAAX;AACH,GAFD,MAGI;AACA,QAAII,UAAU,GAACJ,OAAO,CAACE,QAAR,EAAf;AACAjB,IAAAA,OAAO,CAAC,CAAD,CAAP,GAAWmB,UAAU,CAACD,MAAX,CAAkB,CAAlB,EAAoB,CAApB,CAAX;AACAlB,IAAAA,OAAO,CAAC,CAAD,CAAP,GAAWmB,UAAU,CAACD,MAAX,CAAkB,CAAlB,CAAX;AACH;;AACD,MAAGb,OAAO,GAAC,EAAX,EAAc;AACVL,IAAAA,OAAO,CAAC,CAAD,CAAP,GAAWK,OAAX;AACH,GAFD,MAGI;AACA,QAAIe,UAAU,GAACf,OAAO,CAACY,QAAR,EAAf;AACAjB,IAAAA,OAAO,CAAC,CAAD,CAAP,GAAWoB,UAAU,CAACF,MAAX,CAAkB,CAAlB,EAAoB,CAApB,CAAX;AACAlB,IAAAA,OAAO,CAAC,CAAD,CAAP,GAAWoB,UAAU,CAACF,MAAX,CAAkB,CAAlB,CAAX;AACH;;AACDT,EAAAA,OAAO,CAACC,GAAR,CAAYV,OAAZ;AACA,SAAOA,OAAP;AACH,CAnCD;;MAAMM,c;AAoCNG,OAAO,CAACC,GAAR,CAAYJ,cAAc,CAAC,CAAC,CAAF,CAA1B,E,CACA","sourcesContent":["\nconst ArrayToSeconds=(timeArr)=>{\n    const hh=(parseInt(timeArr[0])*10)+parseInt(timeArr[1]);\n    const mm=(parseInt(timeArr[2])*10)+parseInt(timeArr[3]);\n    const ss=(parseInt(timeArr[4])*10)+parseInt(timeArr[5]);\n    let seconds=(hh*3600)+(mm*60)+(ss);\n    //console.log(seconds)\n    return(seconds)\n}\n\nconst SecondsToArray=(timeInSec)=>{\n    let totalSeconds=parseInt(timeInSec);\n    console.log(totalSeconds)\n    let hour=Math.floor(totalSeconds/3600);\n    let hourSec=hour*3600;\n    let minutes=Math.floor((totalSeconds-(hourSec))/60);\n    let seconds=totalSeconds-(hourSec)-(minutes*60);\n    let timeArr=[0,0,0,0,0,0];\n    \n    if(hour<10){\n        timeArr[1]=hour;\n    }\n    else{\n        let strhour=hour.toString();\n        timeArr[0]=strhour.substr(0,1);\n        timeArr[1]=strhour.substr(1,);\n    }\n    if(minutes<10){\n        timeArr[3]=minutes;\n    }\n    else{\n        let strMinutes=minutes.toString();\n        timeArr[2]=strMinutes.substr(0,1);\n        timeArr[3]=strMinutes.substr(1,);\n    }\n    if(seconds<10){\n        timeArr[5]=seconds;\n    }\n    else{\n        let strSeconds=seconds.toString();\n        timeArr[4]=strSeconds.substr(0,1);\n        timeArr[5]=strSeconds.substr(1,);\n    }\n    console.log(timeArr);\n    return timeArr;\n}\nconsole.log(SecondsToArray(-2))\n//console.log(SecondsToArray(ArrayToSeconds([1,1,5,8,0,3])))\n\n\n"]},"metadata":{},"sourceType":"module"}