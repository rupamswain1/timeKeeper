{"ast":null,"code":"import { pauseTask } from './Task.action';\nimport TaskType from './Task.type';\nconst INITIAL_STATUS = {\n  taskList: {}\n};\nexport const TaskReducer = (state = INITIAL_STATUS, action) => {\n  switch (action.type) {\n    case TaskType.ADD_TASK:\n      if (state.taskList[action.taskName] == undefined) {\n        let taskData = {\n          time: 0,\n          paused: false,\n          isCompleted: false,\n          color: 'rgb(239, 68, 11)',\n          percentage: 0\n        };\n        state.taskList[action.taskName] = taskData;\n      }\n\n      return { ...state,\n        taskList: { ...state.taskList\n        }\n      };\n\n    case TaskType.REMOVE_TASK:\n      delete state.taskList[action.taskName];\n      return { ...state,\n        taskList: { ...state.taskList\n        }\n      };\n\n    case TaskType.PAUSE_TASK:\n      state.taskList[action.taskName].paused = true;\n      return { ...state,\n        taskList: { ...state.taskList\n        }\n      };\n\n    case TaskType.START_TASK:\n      state.taskList[action.taskName].paused = false;\n      return { ...state,\n        taskList: { ...state.taskList\n        }\n      };\n\n    case TaskType.COMPLETED_TASK:\n      state.taskList[action.taskName].isCompleted = true;\n      return { ...state,\n        taskList: { ...state.taskList\n        }\n      };\n\n    case TaskType.ADD_BREAK_TASK:\n      if (state.taskList[action.taskName] == undefined) {\n        let taskData = {\n          time: 0,\n          paused: false,\n          isCompleted: false,\n          color: action.color,\n          percentage: 0,\n          type: 'break'\n        };\n        state.taskList[action.taskName] = taskData;\n      } else {}\n\n      return { ...state,\n        taskList: { ...state.taskList\n        }\n      };\n\n    default:\n      return state;\n  }\n};\n_c = TaskReducer;\n\nvar _c;\n\n$RefreshReg$(_c, \"TaskReducer\");","map":{"version":3,"sources":["/home/rupam/Documents/Development/Timekeeper/timekeeper-frontend/src/redux/task/Task.reducer.js"],"names":["pauseTask","TaskType","INITIAL_STATUS","taskList","TaskReducer","state","action","type","ADD_TASK","taskName","undefined","taskData","time","paused","isCompleted","color","percentage","REMOVE_TASK","PAUSE_TASK","START_TASK","COMPLETED_TASK","ADD_BREAK_TASK"],"mappings":"AAAA,SAASA,SAAT,QAA0B,eAA1B;AACA,OAAOC,QAAP,MAAqB,aAArB;AAEA,MAAMC,cAAc,GAAC;AACjBC,EAAAA,QAAQ,EAAC;AADQ,CAArB;AAKA,OAAO,MAAMC,WAAW,GAAC,CAACC,KAAK,GAACH,cAAP,EAAsBI,MAAtB,KAA+B;AACpD,UAAOA,MAAM,CAACC,IAAd;AACI,SAAKN,QAAQ,CAACO,QAAd;AACI,UAAGH,KAAK,CAACF,QAAN,CAAeG,MAAM,CAACG,QAAtB,KAAiCC,SAApC,EAA8C;AAC1C,YAAIC,QAAQ,GAAC;AACTC,UAAAA,IAAI,EAAC,CADI;AAETC,UAAAA,MAAM,EAAC,KAFE;AAGTC,UAAAA,WAAW,EAAC,KAHH;AAITC,UAAAA,KAAK,EAAC,kBAJG;AAKTC,UAAAA,UAAU,EAAC;AALF,SAAb;AAOAX,QAAAA,KAAK,CAACF,QAAN,CAAeG,MAAM,CAACG,QAAtB,IAAgCE,QAAhC;AACH;;AACD,aAAM,EACF,GAAGN,KADD;AAEFF,QAAAA,QAAQ,EAAC,EAAC,GAAGE,KAAK,CAACF;AAAV;AAFP,OAAN;;AAIJ,SAAKF,QAAQ,CAACgB,WAAd;AACI,aAAOZ,KAAK,CAACF,QAAN,CAAeG,MAAM,CAACG,QAAtB,CAAP;AACA,aAAM,EACF,GAAGJ,KADD;AAEFF,QAAAA,QAAQ,EAAC,EAAC,GAAGE,KAAK,CAACF;AAAV;AAFP,OAAN;;AAIJ,SAAKF,QAAQ,CAACiB,UAAd;AACIb,MAAAA,KAAK,CAACF,QAAN,CAAeG,MAAM,CAACG,QAAtB,EAAgCI,MAAhC,GAAuC,IAAvC;AACA,aAAM,EACF,GAAGR,KADD;AAEFF,QAAAA,QAAQ,EAAC,EAAC,GAAGE,KAAK,CAACF;AAAV;AAFP,OAAN;;AAIJ,SAAKF,QAAQ,CAACkB,UAAd;AACId,MAAAA,KAAK,CAACF,QAAN,CAAeG,MAAM,CAACG,QAAtB,EAAgCI,MAAhC,GAAuC,KAAvC;AACA,aAAM,EACF,GAAGR,KADD;AAEFF,QAAAA,QAAQ,EAAC,EAAC,GAAGE,KAAK,CAACF;AAAV;AAFP,OAAN;;AAIJ,SAAKF,QAAQ,CAACmB,cAAd;AACIf,MAAAA,KAAK,CAACF,QAAN,CAAeG,MAAM,CAACG,QAAtB,EAAgCK,WAAhC,GAA4C,IAA5C;AACA,aAAM,EACF,GAAGT,KADD;AAEFF,QAAAA,QAAQ,EAAC,EAAC,GAAGE,KAAK,CAACF;AAAV;AAFP,OAAN;;AAIJ,SAAKF,QAAQ,CAACoB,cAAd;AACI,UAAGhB,KAAK,CAACF,QAAN,CAAeG,MAAM,CAACG,QAAtB,KAAiCC,SAApC,EAA8C;AAC1C,YAAIC,QAAQ,GAAC;AACTC,UAAAA,IAAI,EAAC,CADI;AAETC,UAAAA,MAAM,EAAC,KAFE;AAGTC,UAAAA,WAAW,EAAC,KAHH;AAITC,UAAAA,KAAK,EAACT,MAAM,CAACS,KAJJ;AAKTC,UAAAA,UAAU,EAAC,CALF;AAMTT,UAAAA,IAAI,EAAC;AANI,SAAb;AAQAF,QAAAA,KAAK,CAACF,QAAN,CAAeG,MAAM,CAACG,QAAtB,IAAgCE,QAAhC;AACH,OAVD,MAWI,CAEH;;AACD,aAAM,EACF,GAAGN,KADD;AAEFF,QAAAA,QAAQ,EAAC,EAAC,GAAGE,KAAK,CAACF;AAAV;AAFP,OAAN;;AAIJ;AACI,aAAOE,KAAP;AA5DR;AA8DH,CA/DM;KAAMD,W","sourcesContent":["import { pauseTask } from './Task.action';\nimport TaskType from './Task.type';\n\nconst INITIAL_STATUS={\n    taskList:{}\n}\n\n\nexport const TaskReducer=(state=INITIAL_STATUS,action)=>{\n    switch(action.type){\n        case TaskType.ADD_TASK:\n            if(state.taskList[action.taskName]==undefined){\n                let taskData={\n                    time:0,\n                    paused:false,\n                    isCompleted:false,\n                    color:'rgb(239, 68, 11)',\n                    percentage:0,\n                }\n                state.taskList[action.taskName]=taskData;\n            }\n            return{\n                ...state,\n                taskList:{...state.taskList}\n            }\n        case TaskType.REMOVE_TASK:\n            delete state.taskList[action.taskName];\n            return{\n                ...state,\n                taskList:{...state.taskList}\n            }\n        case TaskType.PAUSE_TASK:\n            state.taskList[action.taskName].paused=true;\n            return{\n                ...state,\n                taskList:{...state.taskList}\n            }\n        case TaskType.START_TASK:\n            state.taskList[action.taskName].paused=false;\n            return{\n                ...state,\n                taskList:{...state.taskList}\n            }\n        case TaskType.COMPLETED_TASK:\n            state.taskList[action.taskName].isCompleted=true;\n            return{\n                ...state,\n                taskList:{...state.taskList}\n            }\n        case TaskType.ADD_BREAK_TASK:\n            if(state.taskList[action.taskName]==undefined){\n                let taskData={\n                    time:0,\n                    paused:false,\n                    isCompleted:false,\n                    color:action.color,\n                    percentage:0,\n                    type:'break',\n                }\n                state.taskList[action.taskName]=taskData;\n            }\n            else{\n\n            }\n            return{\n                ...state,\n                taskList:{...state.taskList}\n            }\n        default:\n            return state;\n    }\n}"]},"metadata":{},"sourceType":"module"}