{"ast":null,"code":"import { pauseTask } from './Task.action';\nimport TaskType from './Task.type';\nconst INITIAL_STATUS = {\n  taskList: {},\n  activeTask: null\n};\nexport const TaskReducer = (state = INITIAL_STATUS, action) => {\n  switch (action.type) {\n    case TaskType.ADD_TASK:\n      if (state.taskList[action.taskName] == undefined) {\n        let taskData = {\n          time: 0,\n          paused: true,\n          isCompleted: false,\n          color: 'rgb(239, 68, 11)',\n          percentage: 0\n        };\n        state.taskList[action.taskName] = taskData;\n      }\n\n      return { ...state,\n        taskList: { ...state.taskList\n        }\n      };\n\n    case TaskType.REMOVE_TASK:\n      delete state.taskList[action.taskName];\n\n      if (state.activeTask === action.taskName) {\n        state.activeTask = null;\n      }\n\n      return { ...state,\n        taskList: { ...state.taskList\n        },\n        activeTask: state.activeTask\n      };\n\n    case TaskType.PAUSE_TASK:\n      state.taskList[action.taskName].paused = true;\n      state.activeTask = null;\n      return { ...state,\n        taskList: { ...state.taskList\n        },\n        activeTask: state.activeTask\n      };\n\n    case TaskType.START_TASK:\n      for (var key in state.taskList) {\n        state.taskList[key].paused = true;\n      }\n\n      state.taskList[action.taskName].paused = false;\n\n      if (action.seconds != undefined && action.totalTime != undefined) {\n        state.taskList[action.taskName].time = parseInt(state.taskList[action.taskName].time) + parseInt(action.seconds);\n        console.log(action.totalTime);\n        console.log(state.taskList[action.taskName].time);\n        state.taskList[action.taskName].percentage = (state.taskList[action.taskName].time / parseInt(action.totalTime) * parseInt(100)).toFixed(1);\n      }\n\n      state.activeTask = action.taskName;\n      return { ...state,\n        taskList: { ...state.taskList\n        },\n        activeTask: state.activeTask\n      };\n\n    case TaskType.COMPLETED_TASK:\n      state.taskList[action.taskName].isCompleted = true;\n\n      if (state.activeTask === action.taskName) {\n        state.activeTask = null;\n      }\n\n      return { ...state,\n        taskList: { ...state.taskList\n        },\n        activeTask: state.activeTask\n      };\n\n    case TaskType.ADD_BREAK_TASK:\n      for (var key in state.taskList) {\n        //console.log(key)\n        if (key != action.taskName) {\n          state.taskList[key].paused = true;\n        } //console.log(state.taskList[key].pasued)\n\n      }\n\n      if (action.taskName != 'releaseAll') {\n        //console.log(state.taskList)\n        if (state.taskList[action.taskName] === undefined) {\n          let taskData = {\n            time: 0,\n            paused: false,\n            isCompleted: false,\n            color: action.color,\n            percentage: 0,\n            type: 'break'\n          };\n          state.taskList[action.taskName] = taskData;\n          state.activeTask = action.taskName;\n        } else {\n          //console.log('********************************************************')\n          //console.log(state.taskList[action.taskName].paused)\n          if (!state.taskList[action.taskName].paused) {\n            state.taskList[action.taskName].paused = true;\n            state.activeTask = null;\n          } else {\n            state.taskList[action.taskName].paused = false;\n            state.activeTask = action.taskName;\n          }\n        }\n      }\n\n      return { ...state,\n        taskList: { ...state.taskList\n        },\n        activeTask: state.activeTask\n      };\n\n    case TaskType.REMOVE_ALL_TASK:\n      return { ...state,\n        taskList: {},\n        activeTask: null\n      };\n\n    case TaskType.COMPLETED_TASK:\n      for (var key in state.taskList) {\n        state.taskList[key].isCompleted = true;\n      }\n\n      console.log(state.taskList[key]);\n      return { ...state,\n        activeTask: null,\n        taskList: { ...state.taskList\n        }\n      };\n\n    default:\n      return state;\n  }\n};\n_c = TaskReducer;\n\nvar _c;\n\n$RefreshReg$(_c, \"TaskReducer\");","map":{"version":3,"sources":["/home/rupam/Documents/Development/Timekeeper/timekeeper-frontend/src/redux/task/Task.reducer.js"],"names":["pauseTask","TaskType","INITIAL_STATUS","taskList","activeTask","TaskReducer","state","action","type","ADD_TASK","taskName","undefined","taskData","time","paused","isCompleted","color","percentage","REMOVE_TASK","PAUSE_TASK","START_TASK","key","seconds","totalTime","parseInt","console","log","toFixed","COMPLETED_TASK","ADD_BREAK_TASK","REMOVE_ALL_TASK"],"mappings":"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","sourcesContent":["import { pauseTask } from './Task.action';\nimport TaskType from './Task.type';\n\nconst INITIAL_STATUS={\n    taskList:{},\n    activeTask:null\n}\n\n\nexport const TaskReducer=(state=INITIAL_STATUS,action)=>{\n    switch(action.type){\n        case TaskType.ADD_TASK:\n            if(state.taskList[action.taskName]==undefined){\n                let taskData={\n                    time:0,\n                    paused:true,\n                    isCompleted:false,\n                    color:'rgb(239, 68, 11)',\n                    percentage:0,\n                }\n                state.taskList[action.taskName]=taskData;\n            }\n            return{\n                ...state,\n                taskList:{...state.taskList},\n                \n            }\n        case TaskType.REMOVE_TASK:\n            delete state.taskList[action.taskName];\n            if(state.activeTask===action.taskName){\n                state.activeTask=null;\n            }\n            return{\n                ...state,\n                taskList:{...state.taskList},\n                activeTask:state.activeTask,\n            }\n        case TaskType.PAUSE_TASK:\n            state.taskList[action.taskName].paused=true;\n            state.activeTask=null;\n            return{\n                ...state,\n                taskList:{...state.taskList},\n                activeTask:state.activeTask,\n            }\n        case TaskType.START_TASK:\n            for(var key in state.taskList){\n                state.taskList[key].paused=true;\n            }\n            state.taskList[action.taskName].paused=false;\n            if(action.seconds!=undefined && action.totalTime!=undefined){\n            state.taskList[action.taskName].time=parseInt(state.taskList[action.taskName].time)+parseInt(action.seconds);\n            console.log(action.totalTime);\n            console.log(state.taskList[action.taskName].time)\n            \n            state.taskList[action.taskName].percentage=(((state.taskList[action.taskName].time)/(parseInt(action.totalTime)))*parseInt(100)).toFixed(1);\n            }\n            state.activeTask=action.taskName;\n            return{\n                ...state,\n                taskList:{...state.taskList},\n                activeTask:state.activeTask,\n            }\n        case TaskType.COMPLETED_TASK:\n            state.taskList[action.taskName].isCompleted=true;\n            if(state.activeTask===action.taskName){\n                state.activeTask=null;\n            }\n            return{\n                ...state,\n                taskList:{...state.taskList},\n                activeTask:state.activeTask,\n            }\n        case TaskType.ADD_BREAK_TASK:\n            for(var key in state.taskList){\n                //console.log(key)\n                if(key!=action.taskName){\n                    state.taskList[key].paused=true;\n                }\n                //console.log(state.taskList[key].pasued)\n            }\n            if(action.taskName!='releaseAll'){\n                \n                //console.log(state.taskList)\n                if((state.taskList[action.taskName]===undefined)){\n                let taskData={\n                    time:0,\n                    paused:false,\n                    isCompleted:false,\n                    color:action.color,\n                    percentage:0,\n                    type:'break',\n                }\n                state.taskList[action.taskName]=taskData;\n                state.activeTask=action.taskName\n                }\n                else{\n\n                    //console.log('********************************************************')\n                    //console.log(state.taskList[action.taskName].paused)\n                    if(!(state.taskList[action.taskName].paused)){\n                        \n                        state.taskList[action.taskName].paused=true;\n                        state.activeTask=null\n                    }\n                    else{\n                        \n                        state.taskList[action.taskName].paused=false;\n                        state.activeTask=action.taskName\n                    }\n\n                }\n\n            }\n            \n            return{\n                ...state,\n                taskList:{...state.taskList},\n                activeTask:state.activeTask,\n            }\n            case TaskType.REMOVE_ALL_TASK:\n                return{\n                    ...state,\n                    taskList:{},\n                    activeTask:null\n                }\n            case TaskType.COMPLETED_TASK:\n                for(var key in state.taskList){\n                    state.taskList[key].isCompleted=true;\n                }\n                console.log( state.taskList[key])\n                return{\n                    ...state,\n                    activeTask:null,\n                    taskList:{...state.taskList}\n                }\n        default:\n            return state;\n    }\n}"]},"metadata":{},"sourceType":"module"}