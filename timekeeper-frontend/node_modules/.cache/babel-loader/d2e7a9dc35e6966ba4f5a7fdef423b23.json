{"ast":null,"code":"import BreakButtonType from './BreakButton.type';\nimport { startBreak, getBreakColor } from './BreakButton.action';\nimport { takeEvery, put, select } from 'redux-saga/effects';\nimport { addBreaktask } from '../task/Task.action';\nimport { setCountDownTrue } from '../totalTime/TotalTime.action';\n\nfunction* startBreakInTask({\n  type,\n  breakName\n}) {\n  let taskName = breakName;\n  let breakButtonSatate = yield select(state => state.BreakButtonReducer); //console.log(breakButtonSatate)\n\n  yield put(addBreaktask(breakName, breakButtonSatate[breakName].color));\n  yield put(setCountDownTrue());\n}\n\nexport function* startBreakSaga() {\n  yield takeEvery(BreakButtonType.START_BREAK, startBreakInTask);\n}","map":{"version":3,"sources":["/home/rupam/Documents/Development/Timekeeper/timekeeper-frontend/src/redux/breakButton/BreakButton.sagas.js"],"names":["BreakButtonType","startBreak","getBreakColor","takeEvery","put","select","addBreaktask","setCountDownTrue","startBreakInTask","type","breakName","taskName","breakButtonSatate","state","BreakButtonReducer","color","startBreakSaga","START_BREAK"],"mappings":"AAAA,OAAOA,eAAP,MAA4B,oBAA5B;AACA,SAAQC,UAAR,EAAmBC,aAAnB,QAAuC,sBAAvC;AACA,SAAQC,SAAR,EAAkBC,GAAlB,EAAsBC,MAAtB,QAAmC,oBAAnC;AACA,SAAQC,YAAR,QAA2B,qBAA3B;AACA,SAAQC,gBAAR,QAA+B,+BAA/B;;AAEA,UAAUC,gBAAV,CAA2B;AAACC,EAAAA,IAAD;AAAMC,EAAAA;AAAN,CAA3B,EAA4C;AACxC,MAAIC,QAAQ,GAACD,SAAb;AACA,MAAIE,iBAAiB,GAAC,MAAMP,MAAM,CAACQ,KAAK,IAAEA,KAAK,CAACC,kBAAd,CAAlC,CAFwC,CAGxC;;AACA,QAAMV,GAAG,CAACE,YAAY,CAACI,SAAD,EAAWE,iBAAiB,CAACF,SAAD,CAAjB,CAA6BK,KAAxC,CAAb,CAAT;AACA,QAAMX,GAAG,CAACG,gBAAgB,EAAjB,CAAT;AAEH;;AACD,OAAO,UAAUS,cAAV,GAA0B;AAC7B,QAAMb,SAAS,CAACH,eAAe,CAACiB,WAAjB,EAA6BT,gBAA7B,CAAf;AAEH","sourcesContent":["import BreakButtonType from './BreakButton.type';\nimport {startBreak,getBreakColor} from './BreakButton.action';\nimport {takeEvery,put,select} from 'redux-saga/effects';\nimport {addBreaktask} from '../task/Task.action';\nimport {setCountDownTrue} from '../totalTime/TotalTime.action';\n\nfunction* startBreakInTask({type,breakName}){\n    let taskName=breakName;\n    let breakButtonSatate=yield select(state=>state.BreakButtonReducer)\n    //console.log(breakButtonSatate)\n    yield put(addBreaktask(breakName,breakButtonSatate[breakName].color));\n    yield put(setCountDownTrue());\n    \n}\nexport function* startBreakSaga(){\n    yield takeEvery(BreakButtonType.START_BREAK,startBreakInTask)\n\n}"]},"metadata":{},"sourceType":"module"}